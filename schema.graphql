scalar Time

schema {
    query: PhotoQuery
    mutation: Mutation
}

type PhotoQuery {
    interesting(page: Int): PhotoList
    search(query: String, bbox: BoundingBox, page: Int): PhotoList
    detail(photoId: String): PhotoDetail
}

type Mutation {
    bookmarkPhoto(photoId: String!): OpResult!
}

type OpResult {
    success: Boolean!,
    error: String
}

type PhotoList {
    photos: [Photo]
    pagination: Pagination!
}

type Photo {
    id: ID!
    ownerName: String!
    location: Location
    photoUrls: [SizedURL]
    bookmarked: Boolean!
}

type Location {
    latitude: Float!
    longitude: Float!
    accuracy: Int!
}

type SizedURL {
    size: PhotoSize!
    url: String!
    width: Int!
    height: Int!
}

enum PhotoSize {
    Thumbnail,
    Small,
    Small320,
    Square,
    LargeSquare,
    Medium,
    Medium640,
    Medium800,
    Large,
    Original
}

type Pagination {
    hasNext: Boolean!
    next: Int
}

input BoundingBox {
    minLongitude: Float!
    minLatitude: Float!
    maxLongitude: Float!
    maxLatitude: Float!
}

type PhotoDetail {
    id: String!
    uploadedAt: Time!
    owner: PhotoOwner!
    title: String!
    description: String!
    camera: String
    tags: [Tag]
    exif: [Exif]
    location: Location
    bookmarked: Boolean!
}

type PhotoOwner {
    userId: String!
    name: String!
    userName: String!
    location: String
}

type Tag {
    raw: String!
    isMachineTag: Boolean!
}

type Exif {
    tagSpace: String!
    tag: String!
    label: String!
    raw: String!
}